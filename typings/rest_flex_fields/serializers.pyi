"""
This type stub file was generated by pyright.
"""

from typing import Any, Callable, Optional, Protocol, Sequence, TypeVar, Union
from django.db.models.base import Model
from rest_framework import serializers

_IN = TypeVar('_IN', bound=Model)

_M = TypeVar('_M', bound=Model)


_SerializerClass = type[serializers.BaseSerializer[Any]]

_ExpandableFields = dict[str, Union[
    _SerializerClass,
    tuple[_SerializerClass, dict[str, Any]]
]]


class FlexFieldsSerializerMixin(serializers.ModelSerializer[_IN]):
    """
        A ModelSerializer that takes additional arguments for
        "fields", "omit" and "expand" in order to
        control which fields are displayed, and whether to replace simple
        values with complex, nested serializations
    """
    class Meta(Protocol[_M]):
        model: type[_M]
        fields: list[str]
        read_only_fields = list[str]
        extra_kwargs: dict[str, dict[str, Any]]
        expandable_fields: _ExpandableFields
        validators: list[Any]

    expandable_fields: _ExpandableFields = ...

    def __init__(self, instance: Optional[Union[_IN, Sequence[_IN]]] = ..., data: Any = ..., partial: bool = ...,
                 many: bool = ..., context: dict[str, Any] = ..., read_only: bool = ...,
                 write_only: bool = ..., required: Optional[bool] = ..., default: Any = ...,
                 initial: Any = ..., source: Optional[str] = ..., label: Optional[str] = ...,
                 help_text: Optional[str] = ..., style: Optional[dict[str, Any]] = ...,
                 error_messages: Optional[dict[str, str]] = ..., validators: Optional[Sequence[Callable[..., None]]] = ...,
                 allow_null: bool = ..., fields: list[str] = ..., expand: list[str] = ..., omit: list[str] = ...) -> None:
        ...

    def to_representation(self, instance: _IN) -> Any:
        ...

    def apply_flex_fields(self) -> None:
        ...


class FlexFieldsModelSerializer(FlexFieldsSerializerMixin[_IN], serializers.ModelSerializer[_IN]):
    ...
