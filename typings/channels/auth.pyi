"""
This type stub file was generated by pyright.
"""

from typing import Any
from django.utils.functional import LazyObject
from channels.db import database_sync_to_async
from channels.middleware import BaseMiddleware

@database_sync_to_async
def get_user(scope: Any) -> Any:
    """
    Return the user model instance associated with the given scope.
    If no user is retrieved, return an instance of `AnonymousUser`.
    """
    ...

@database_sync_to_async
def login(scope: Any, user: Any, backend: Any=...) -> Any:
    """
    Persist a user id and a backend in the request.
    This way a user doesn't have to re-authenticate on every request.
    Note that data set during the anonymous session is retained when the user logs in.
    """
    ...

@database_sync_to_async
def logout(scope: Any) -> Any:
    """
    Remove the authenticated user's ID from the request and flush their session data.
    """
    ...

class UserLazyObject(LazyObject):
    """
    Throw a more useful error message when scope['user'] is accessed before
    it's resolved
    """
    ...


class AuthMiddleware(BaseMiddleware):
    """
    Middleware which populates scope["user"] from a Django session.
    Requires SessionMiddleware to function.
    """
    def populate_scope(self, scope: Any) -> Any:
        ...
    
    async def resolve_scope(self, scope: Any) -> Any:
        ...
    
    async def __call__(self, scope: Any, receive: Any, send: Any) -> Any:
        ...
    


def AuthMiddlewareStack(inner: Any) -> Any:
    ...

