"""
This type stub file was generated by pyright.
"""

import logging
from typing import Any
from asgiref.sync import sync_to_async
from django import http
from django.core.handlers import base
from django.utils.functional import cached_property

logger = logging.getLogger("django.request")


class AsgiRequest(http.HttpRequest):
    """
    Custom request subclass that decodes from an ASGI-standard request
    dict, and wraps request body handling.
    """
    body_receive_timeout: Any = ...

    def __init__(self, scope: Any, stream: Any) -> None:
        ...

    @cached_property
    def GET(self) -> Any:
        ...

    POST: Any = ...
    FILES: Any = ...

    @cached_property
    def COOKIES(self) -> Any:
        ...


class AsgiHandler(base.BaseHandler):
    """
    Handler for ASGI requests for the view system only (it will have got here
    after traversing the dispatch-by-channel-name system, which decides it's
    a HTTP request)

    You can also manually construct it with a get_response callback if you
    want to run a single Django view yourself. If you do this, though, it will
    not do any URL routing or middleware (Channels uses it for staticfiles'
    serving code)
    """
    request_class: Any = ...
    chunk_size: Any = ...

    def __init__(self) -> None:
        ...

    async def __call__(self, scope: Any, receive: Any, send: Any) -> Any:
        """
        Async entrypoint - uses the sync_to_async wrapper to run things in a
        threadpool.
        """
        ...

    async def read_body(self, receive: Any) -> Any:
        """Reads a HTTP body from an ASGI connection."""
        ...

    @sync_to_async
    def handle(self, body: Any) -> Any:
        """
        Synchronous message processing.
        """
        ...

    def handle_uncaught_exception(self, request: Any, resolver: Any, exc_info: Any) -> Any:
        """
        Last-chance handler for exceptions.
        """
        ...

    def load_middleware(self) -> Any:
        """
        Loads the Django middleware chain and caches it on the class.
        """
        ...

    @classmethod
    def encode_response(cls, response: Any) -> Any:
        """
        Encodes a Django HTTP response into ASGI http.response message(s).
        """
        ...

    @classmethod
    def chunk_bytes(cls, data: Any) -> Any:
        """
        Chunks some data up so it can be sent in reasonable size messages.
        Yields (chunk, last_chunk) tuples.
        """
        ...
