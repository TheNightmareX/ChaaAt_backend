"""
This type stub file was generated by pyright.
"""

from typing import Any


class ChannelLayerManager:
    """
    Takes a settings dictionary of backends and initialises them on request.
    """

    def __init__(self) -> None:
        ...

    @property
    def configs(self) -> Any:
        ...

    def make_backend(self, name: Any) -> Any:
        """
        Instantiate channel layer.
        """
        ...

    def make_test_backend(self, name: Any) -> Any:
        """
        Instantiate channel layer using its test config.
        """
        ...

    def __getitem__(self, key: Any) -> Any:
        ...

    def __contains__(self, key: Any) -> Any:
        ...

    def set(self, key: Any, layer: Any) -> Any:
        """
        Sets an alias to point to a new ChannelLayerWrapper instance, and
        returns the old one that it replaced. Useful for swapping out the
        backend during tests.
        """
        ...


class BaseChannelLayer:
    """
    Base channel layer class that others can inherit from, with useful
    common functionality.
    """

    def __init__(self, expiry: Any = ..., capacity: Any = ..., channel_capacity: Any = ...) -> None:
        ...

    def compile_capacities(self, channel_capacity: Any) -> Any:
        """
        Takes an input channel_capacity dict and returns the compiled list
        of regexes that get_capacity will look for as self.channel_capacity
        """
        ...

    def get_capacity(self, channel: Any) -> Any:
        """
        Gets the correct capacity for the given channel; either the default,
        or a matching result from channel_capacity. Returns the first matching
        result; if you want to control the order of matches, use an ordered dict
        as input.
        """
        ...

    def match_type_and_length(self, name: Any) -> Any:
        ...

    channel_name_regex: Any = ...
    group_name_regex: Any = ...
    invalid_name_error: Any = ...

    def valid_channel_name(self, name: Any, receive: Any = ...) -> Any:
        ...

    def valid_group_name(self, name: Any) -> Any:
        ...

    def valid_channel_names(self, names: Any, receive: Any = ...) -> Any:
        ...

    def non_local_name(self, name: Any) -> Any:
        """
        Given a channel name, returns the "non-local" part. If the channel name
        is a process-specific channel (contains !) this means the part up to
        and including the !; if it is anything else, this means the full name.
        """
        ...


class InMemoryChannelLayer(BaseChannelLayer):
    """
    In-memory channel layer implementation
    """

    def __init__(self, expiry: Any=..., group_expiry: Any=..., capacity: Any=..., channel_capacity: Any=..., **kwargs: Any) -> None:
        ...

    extensions: Any = ...

    async def send(self, channel: Any, message: Any) -> Any:
        """
        Send a message onto a (general or specific) channel.
        """
        ...

    async def receive(self, channel: Any) -> Any:
        """
        Receive the first message that arrives on the channel.
        If more than one coroutine waits on the same channel, a random one
        of the waiting coroutines will get the result.
        """
        ...

    async def new_channel(self, prefix: Any=...) -> Any:
        """
        Returns a new channel name that can be used by something in our
        process as a specific channel.
        """
        ...

    async def flush(self) -> Any:
        ...

    async def close(self) -> Any:
        ...

    async def group_add(self, group: Any, channel: Any) -> Any:
        """
        Adds the channel name to a group.
        """
        ...

    async def group_discard(self, group: Any, channel: Any) -> Any:
        ...

    async def group_send(self, group: Any, message: Any) -> Any:
        ...


def get_channel_layer(alias: Any=...) -> Any:
    """
    Returns a channel layer by alias, or None if it is not configured.
    """
    ...


channel_layers = ChannelLayerManager()
