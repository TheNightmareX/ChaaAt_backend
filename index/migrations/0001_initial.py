# Generated by Django 3.1.3 on 2021-02-28 06:17

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('bio', models.TextField(blank=True, default='', max_length=50)),
                ('sex', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('X', 'Secret')], default='X', max_length=1)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Chatroom',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('friendship_exclusive', models.BooleanField(default=False)),
                ('creation_time', models.DateTimeField(auto_now_add=True)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chatrooms_created', to=settings.AUTH_USER_MODEL)), # type: ignore
            ],
        ),
        migrations.CreateModel(
            name='ChatroomMembership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_manager', models.BooleanField(default=False)),
                ('last_read', models.DateTimeField(default=django.utils.timezone.now)),
                ('creation_time', models.DateTimeField(auto_now_add=True)),
                ('chatroom', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='index.chatroom')), # type: ignore
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(max_length=1000)),
                ('creation_time', models.DateTimeField(auto_now_add=True)),
                ('chatroom', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='index.chatroom')), # type: ignore
                ('sender_membership', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages_sent', to='index.chatroommembership')), # type: ignore
            ],
            options={
                'ordering': ['-pk'],
            },
        ),
        migrations.CreateModel(
            name='FriendshipRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField(default='', max_length=50)),
                ('state', models.CharField(choices=[('P', 'Pending'), ('A', 'Accepted'), ('R', 'Rejected')], default='P', max_length=1)),
                ('creation_time', models.DateTimeField(auto_now_add=True)),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friendship_requests_received', to=settings.AUTH_USER_MODEL)), # type: ignore
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friendship_requests_sent', to=settings.AUTH_USER_MODEL)), # type: ignore
            ],
            options={
                'ordering': ['-pk'],
            },
        ),
        migrations.CreateModel(
            name='FriendshipGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friendship_groups', to=settings.AUTH_USER_MODEL)), # type: ignore
            ],
        ),
        migrations.CreateModel(
            name='Friendship',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nickname', models.CharField(blank=True, max_length=20, null=True)),
                ('important', models.BooleanField(default=False)),
                ('chatroom', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='index.chatroom')), # type: ignore
                ('groups', models.ManyToManyField(blank=True, related_name='friendships', to='index.FriendshipGroup')),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL)), # type: ignore
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friendships', to=settings.AUTH_USER_MODEL)), # type: ignore
            ],
        ),
        migrations.CreateModel(
            name='ChatroomMembershipRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField(default='', max_length=50)),
                ('state', models.CharField(choices=[('P', 'Pending'), ('A', 'Accepted'), ('R', 'Rejected')], default='P', max_length=1)),
                ('creation_time', models.DateTimeField(auto_now_add=True)),
                ('chatroom', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='membership_requests', to='index.chatroom')), # type: ignore
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chatroom_membership_requests', to=settings.AUTH_USER_MODEL)), # type: ignore
            ],
            options={
                'ordering': ['-pk'],
            },
        ),
        migrations.CreateModel(
            name='ChatroomMembershipGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chatroom_membership_groups', to=settings.AUTH_USER_MODEL)), # type: ignore
            ],
        ),
        migrations.AddField(
            model_name='chatroommembership',
            name='groups',
            field=models.ManyToManyField(blank=True, related_name='chatroom_memberships', to='index.ChatroomMembershipGroup'),
        ),
        migrations.AddField(
            model_name='chatroommembership',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chatroom_memberships', to=settings.AUTH_USER_MODEL), # type: ignore
        ),
        migrations.AddConstraint(
            model_name='friendshiprequest',
            constraint=models.UniqueConstraint(condition=models.Q(state='P'), fields=('user', 'target'), name='friend_request__unique_pending_request'),
        ),
        migrations.AddConstraint(
            model_name='friendshipgroup',
            constraint=models.UniqueConstraint(fields=('user', 'name'), name='friend_group__unique_group_name'),
        ),
        migrations.AddConstraint(
            model_name='friendship',
            constraint=models.UniqueConstraint(fields=('user', 'target'), name='friend__no_duplicate_friend'),
        ),
        migrations.AddConstraint(
            model_name='chatroommembershiprequest',
            constraint=models.UniqueConstraint(condition=models.Q(state='P'), fields=('user', 'chatroom'), name='chatroom_membership_request__unique_pending_request'),
        ),
        migrations.AddConstraint(
            model_name='chatroommembershipgroup',
            constraint=models.UniqueConstraint(fields=('user', 'name'), name='chatroom_group__unique_group_name'),
        ),
        migrations.AddConstraint(
            model_name='chatroommembership',
            constraint=models.UniqueConstraint(fields=('user', 'chatroom'), name='chatroom_membership__unique_chatroom_membership'),
        ),
    ]
